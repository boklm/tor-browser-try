Using Mozilla Try servers for Tor Browser
=========================================

This script allows to convert a tor browser git branch to a mercurial
repository to push it to Mozilla's Try servers :
https://wiki.mozilla.org/ReleaseEngineering/TryServer


How it works
------------

This tool is split in two separate scripts :

try-prepare-repo::
	A script to prepare the mercurial repository to push to the
	Try servers, and notify the push script.

try-push::
	A script waiting for a notification to push a mercurial
	repository to Mozilla Try servers.

The reason for splitting this is two parts is to allow running the
script to prepare the repository by a user that does not have push
access to Try.

The script to prepare the mercurial repository should be run from the
git repository, and takes the branch name as argument. The argument
--rebase-onto=<commit> can be used if you want to rebase the tor browser
patches onto a specific commit (usually the 'default' commit).

It will :

- find the first tag in the branch's history that match FIREFOX_*

- use git format-patch to generate patches for commits from this tag
  to the tip of the branch

- clone the hg repository https://hg.mozilla.org/releases/mozilla-esr$n/
  for tag FIREFOX_$n_* if it is not cloned yet, and go to that directory

- remove any active MQ, switch to the FIREFOX_* tag and import the
  patches in a new MQ

- add a new empty MQ patch to set the TryChooser command

- if the --rebase-onto=<commit> argument was used, rebase the MQ patches
  onto the selected commit. This can be used to test the tor browser
  patches onto the latest firefox developement version from the same
  ESR branch.

- push to ssh://hg.mozilla.org/try


Options
-------

Those options can be set by setting the environment variable before
running the script :

MOZILLA_HG_DIR::
	The directory where mozilla mercurial repositories are cloned.
	Default is $HOME/mozilla-try.

trychooser::
	The Try options. See http://trychooser.pub.build.mozilla.org/
	for syntax.

hg::
	Path to mercurial executable.


Mercurial and binary patches
----------------------------

When creating patches on binary files, git will output either 'literal'
or 'delta' hunks, using the smallest one of the two. Current versions
of mercurial only support patchs with 'literal' hunks, but git
format-patch on the tor-browser git repository will output some patches
which include 'delta' hunks (for icons modified for rebranding), so
that didn't work.

To solve that problem I made a patch to add support for 'delta' hunks
in mercurial. So we need to use a version of mercurial that has that
patch. It should be part of the next mercurial release :
http://selenic.com/repo/hg/rev/9f1d4323c749

To use a specific version of hg we can do something like this :
----
$ HG_DIR=/some/directory
$ hg clone http://selenic.com/hg $HG_DIR
$ cd $HG_DIR
$ make local
$ export PYTHONPATH=$HG_DIR/build/lib.linux-x86_64-2.7/mercurial
  (this directory will change depending on architecture / python version)
$ export hg=$HG_DIR/hg
$ cd $tor_browser_git
$ try-prepare-repo $branch
----


TODO
----

The things that still need to be done :

- uncomment the push command and try it to see if it works

- make jenkins run this script for new commits, or daily

- something to monitor results from tpbl:
  https://tbpl.mozilla.org/?tree=Try&pusher=our_email

